#
# openSUSE definition file
#
###################################################################################
# NOTE: make sure you REMOVE the old image (with `lxc delete opensuse`)
#       AFTER MODIFYING THIS FILE
###################################################################################

image:
  distribution: openSUSE
  release: 15.0
  description: openSUSE Leap {{ image.release }} with kubeadm
  expiry: 30d
  architecture: x86_64

source:
  downloader: opensuse-http
  url: https://download.opensuse.org
  skip_verification: true

targets:
  lxc:
    create-message: |
      You just created an openSUSE Leap container (release={{ image.release }}, arch={{ image.architecture }})

    config:
      - type: all
        before: 5
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/opensuse.common.conf

      - type: user
        before: 5
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/opensuse.userns.conf

      - type: all
        after: 4
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/common.conf

      - type: user
        after: 4
        content: |-
          lxc.include = LXC_TEMPLATE_CONFIG/userns.conf

      - type: all
        content: |-
          lxc.arch = {{ image.architecture_kernel }}

files:
  - path: /etc/hostname
    generator: hostname

  - path: /etc/hosts
    generator: hosts

  - name: ifcfg-eth0.lxd
    path: /etc/sysconfig/network/ifcfg-eth0
    generator: template
    content: |-
      STARTMODE='auto'
      BOOTPROTO='dhcp'
      HOSTNAME={{ container.name }}
      DHCP_HOSTNAME=`hostname`

  # From the version v11.0 kubelet requires to have shared mode for the host mounts.
  # There is dirty hack for achieve that, inside LXC-container run:
  # see https://medium.com/@kvaps/run-kubernetes-in-lxc-container-f04aa94b6c9c
  - path: /etc/rc.local
    generator: dump
    content: |-
      #!/bin/sh -e
      mount --make-rshared /

packages:
  manager: zypper
  update: false
  refresh: true
  cleanup: true
  repositories:
    - name: suse_ca
      url: http://download.suse.de/ibs/SUSE:/CA/SLE_15_SP1

  sets:
    - packages:
        - systemd-sysvinit
        - openssh
        - sudo
        - apparmor-abstractions
        - elfutils
        - file
        - glib2-tools
        - gzip
        - hardlink
        - hostname
        - iputils
        - net-tools
        - openslp
        - rsync
        - shared-mime-info
        - which
        - vim
        # certificates for the SUSE registry
        - ca-certificates-suse
        # CaaSP packages
        - kubernetes-kubeadm
        - kubernetes-kubelet
        - kubectl
        - haproxy
        - cri-o
        - cri-tools
      action: install

actions:
  - trigger: post-packages
    action: |-
      #!/bin/sh

      echo ">>> tweaking some kubelet args..."
      echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' > /etc/sysconfig/kubelet
      cat /etc/sysconfig/kubelet

      # encryted "linux"
      # obtained with `echo "linux" | openssl passwd -1 -stdin`
      ROOT_PASSWORD='$1$62xujQ/G$IxTMM4LZimNXF3LFcBawC1'

      echo ">>> setting a trivial password for root and allowing SSH for root"
      echo "root:$ROOT_PASSWORD" | /usr/sbin/chpasswd -e
      echo "PermitRootLogin yes" >> /etc/ssh/sshd_config

      mkdir -p /root/.ssh
      chmod 700 /root/.ssh
      touch /root/.ssh/authorized_keys
      chmod 600 /root/.ssh/authorized_keys

      # for using this image with the Vagrant-LXD  plugin, uncomment the following lines:
      # encryted "vagrant"
      # obtained with `echo "vagrant" | openssl passwd -1 -stdin`
      # PASSWORD='$1$TEfkpqbs$cwgryzvqKnlWf5WgPBvKS0'
      # echo ">>> creating vagrant user"
      # groupadd -f vagrant
      # useradd --create-home -p "$PASSWORD" -s /bin/bash vagrant
      # echo ">>> adding vagrant to the 'sudo' group"
      # groupadd -f sudo
      # usermod -a -G sudo vagrant
      # echo ">>> adding vagrant to the 'docker' group"
      # usermod -a -G docker vagrant
      # echo ">>> enabling passwordless sudo for users under the 'sudo' group"
      # mkdir -p /etc/sudoers.d
      # echo "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/sudo

      echo ">>> making sure some packages are not installed..."
      rpm -e --nodeps docker-kubic docker-libnetwork-kubic docker-runc-kubic || /bin/true

      /usr/bin/sed -i -e 's/btrfs/overlay2/g' /etc/crio/crio.conf

      echo ">>> enabling some services..."
      systemctl enable sshd
      systemctl enable crio

      # some commands are really useless in a LXC container, so we create "fake" clones:
      for target in /usr/bin/kmod /sbin/sysctl ; do
        rm -f $target
        ln -s /bin/true $target
      done

      # pre-pull some images
      # IMAGES="\
      #   registry.suse.de/devel/caasp/4.0/containers/containers/caasp/v4/pause:3.1 \
      #   registry.suse.de/devel/caasp/4.0/containers/containers/caasp/v4/etcd:3.3.1 \
      #   registry.suse.de/devel/caasp/4.0/containers/containers/caasp/v4/coredns:1.2.6 \
      #   registry.suse.de/devel/caasp/4.0/containers/containers/caasp/v4/hyperkube:v1.14.0 \
      #   "
      # echo ">>> pre-pulling some images with podman..."
      # for image in $IMAGES ; do
      #   podman pull "$image"
      # done

      exit 0

environment:
  variables:
    - key: HOME
      value: /root
